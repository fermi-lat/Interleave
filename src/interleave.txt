
//--------------------------------------------------------
//     Interleave-specific job options
//     $Header: /nfs/slac/g/glast/ground/cvs/GlastRelease-scons/Interleave/src/interleave.txt,v 1.1 2008/06/19 19:28:51 usher Exp $

ApplicationMgr.DLLs   += { "Interleave" }; 

// force initialization of these before InterleaveAlg 
// by putting these onto a phantom branch (kluge!)

Dummy.BranchMembers = {"AnalysisNtupleAlg", "ClassifyAlg", "FT1Alg", "McCoordsAlg", "ObfCoordsAlg"}; 

// Override the main event sequencer
Generation.Members = {
    "Sequencer/Dummy",
    "Sequencer/GenerateEvent",
    "Sequencer/SimulateEvent"
};

// Event sequencer can now fail for several reasons so null out its failure branch
Event.BranchMembers = {};

// Define the event generation
GenerateEvent.Members = {
    "FluxAlg", 
    "CurrentEventAlg",
    "PointInfoAlg"};

// Define the action when the Generation sequencer fails. ExposureAlg is expected to "fail"    
GenerateEvent.BranchMembers = {"FluxAlg", "ExposureAlg"};

// Define the event simulation
SimulateEvent.Members = {
    "InterleaveBranchAlg",
    "G4Generator"};

// Define what happens when the simulation branch fails (because an interleave event was read in)
SimulateEvent.BranchMembers = {"InterleaveBranchAlg"           // End up here if algorithm fails
                             , "TriggerAlg/TrgAlgInterleave"   // Trigger Algorithm for interleave branch      
                             , "InterleaveAlg"                 // process if interleave, dump otherwise
                             , "Count/interleave"              // keep track of how many on this branch
                             , "ClassifyAlg"                   // recalculate classification (which may be different)
                             , "FT1Alg"                        // add FT1 stuff if an interleave 
                             , "McCoordsAlg"                   // Recalculations...
                             , "ObfCoordsAlg"                  // Recalculations...
                             , "FilterFailAlg/SimEvent"        // Sets the FilterFail for this branch
                              };
                               
//  the (pseudo) sources: get definitions, and add them to the list of sources
FluxSvc.source_lib    += {"$(INTERLEAVEXMLPATH)/source_library.xml"};
FluxAlg.sources       += {"sampled_background"};
FluxAlg.sources       += {"sampled_EarthAlbedo"};

// do not want to override these
InterleaveAlg.DisableList = {"EvtElapsedTime","EvtLiveTime","Pt*","FT1*"};

// This should be what we need to get TriggerAlg on the interleave branch to do the livetime calc
TrgAlgInterleave.applyDeadtime=true;

// the path to the xml files with pointers to the data and rate information 
InterleaveAlg.FilePath = "$(INTERLEAVEXMLPATH)";

// ---------------------------------------------------------
